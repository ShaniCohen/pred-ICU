library(ggplot2)
theme_set(theme_bw(base_size = 14))
# models: Apache, LogisticRegression, RandomForestClassifier, XGBClassifier
model_name <- "XGBClassifier"
relative_file_path <- file.path(paste0(model_name, "_predictions_extended.csv"))
absolute_file_path <- normalizePath(relative_file_path)
model_results <- read.csv(absolute_file_path)
setwd("~/General Purpose/University/Fall 2023/Predictive Modeling in Healthcare/Project/pred-ICU/fairness")
library(ggplot2)
theme_set(theme_bw(base_size = 14))
# models: Apache, LogisticRegression, RandomForestClassifier, XGBClassifier
model_name <- "XGBClassifier"
relative_file_path <- file.path(paste0(model_name, "_predictions_with_age_groups.csv"))
absolute_file_path <- normalizePath(relative_file_path)
model_results <- read.csv(absolute_file_path)
model_results_male <- model_results[model_results$gender == "M",]
model_results_female <- model_results[model_results$gender == "F",]
model_results_genders <- rbind(model_results_male, model_results_female)
calibration_plot <- ggplot(model_results_genders, aes(predictions, labels, col=gender)) +
ggtitle(paste0(model_name, " Calibration Plot by Gender")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results_genders[model_results_genders$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results_genders[model_results_genders$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_gender.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
library(ggplot2)
theme_set(theme_bw(base_size = 14))
# models: Apache, LogisticRegression, RandomForestClassifier, XGBClassifier
model_name <- "XGBClassifier"
relative_file_path <- file.path(paste0(model_name, "_predictions_with_age_groups.csv"))
absolute_file_path <- normalizePath(relative_file_path)
model_results <- read.csv(absolute_file_path)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=ethnicity)) +
ggtitle(paste0(model_name, " Calibration Plot by Ethnicity")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_ethnicity.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
library(ggplot2)
theme_set(theme_bw(base_size = 14))
# models: Apache, LogisticRegression, RandomForestClassifier, XGBClassifier
model_name <- "XGBClassifier"
relative_file_path <- file.path(paste0(model_name, "_predictions_with_age_groups.csv"))
absolute_file_path <- normalizePath(relative_file_path)
model_results <- read.csv(absolute_file_path)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_age_groups.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
library(boot)
theme_set(theme_bw(base_size = 14))
# models: Apache, LogisticRegression, RandomForestClassifier, XGBClassifier
model_name <- "XGBClassifier"
relative_file_path <- file.path(paste0(model_name, "_predictions_with_protected_groups.csv"))
absolute_file_path <- normalizePath(relative_file_path)
model_results <- read.csv(absolute_file_path)
set.seed(123)
brier_score <- function(predictions, observed) {
mean((predictions - observed)^2)
}
bootstrap_brier <- function(data, indices) {
d <- data[indices, ]
return(brier_score(d$predictions, d$labels))
}
bootstrap_results <- boot(data = model_results, statistic = bootstrap_brier, R = 1000)
ci <- boot.ci(bootstrap_results, type = "perc")$percent[4:5]
brier_score_value <- brier_score(model_results$predictions, model_results$labels)
legend_text <- paste0(model_name, " (Brier Score = ", round(brier_score_value, 3), ", CI: ", round(ci[1], 3), "-", round(ci[2], 3), ")")
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE, aes(colour = legend_text)) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=paste0(age_group, " (Brier Score = ", round(brier_score_value, 3), ", CI: ", round(ci[1], 3), "-", round(ci[2], 3), ")"))) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.title = element_blank(), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.title = "Age group", legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.title = paste0("Age group"), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5)) +
labs(fill = "Age Group")
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Age groups", labels = unique(model_results$age_group))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
calibration_plot <- ggplot(model_results, aes(predictions, labels, col=age_group)) +
ggtitle(paste0(model_name, " Calibration Plot by Age Groups")) +
xlab("Observed") +
ylab("Predicted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "grey") +
geom_rug(data = model_results[model_results$labels == 0, ], aes(predictions, labels), sides = "b", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_rug(data = model_results[model_results$labels == 1, ], aes(predictions, labels), sides = "t", linewidth = 0.1, alpha = 0.1, position = position_jitter(width = 0.01, height = 0)) +
geom_smooth(method = stats::loess, se = FALSE) +
scale_x_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
# theme(legend.position = "bottom", legend.text = element_text(size = 14), legend.background = element_rect(colour = "black", size = 0.3, linetype = "solid"), plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Age groups", labels = unique(model_results$age_group))
ggsave(paste0(model_name, "_calibration_plot_age_groups_boot.png"), plot = calibration_plot, width = 10, height = 10, dpi = 300)
